/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : AD1.h
**     Project     : ProcessorExpert
**     Processor   : MK53DN512ZCMD10
**     Component   : ADC
**     Version     : Component 01.699, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2017-12-12, 14:55, # CodeGen: 341
**     Abstract    :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings    :
**          Component name                                 : AD1
**          A/D converter                                  : ADC0
**          Sharing                                        : Disabled
**          ADC_LDD                                        : ADC_LDD
**          Interrupt service/event                        : Disabled
**          A/D channels                                   : 10
**            Channel0                                     : 
**              A/D channel (pin)                          : PTA8/FTM1_CH0/FB_AD17/FTM1_QD_PHA/TRACE_D2/ADC0_SE11
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel1                                     : 
**              A/D channel (pin)                          : PTB2/I2C0_SCL/UART0_RTS_b/ENET0_1588_TMR0/FTM0_FLT3/LCD_P2/ADC0_SE12/TSI0_CH7
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel2                                     : 
**              A/D channel (pin)                          : PTB3/I2C0_SDA/UART0_CTS_b/ENET0_1588_TMR1/FTM0_FLT0/LCD_P3/ADC0_SE13/TSI0_CH8
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel3                                     : 
**              A/D channel (pin)                          : PTA7/FTM0_CH4/FB_AD18/TRACE_D3/ADC0_SE10
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel4                                     : 
**              A/D channel (pin)                          : PTC1/SPI0_PCS3/UART1_RTS_b/FTM0_CH0/LCD_P21/ADC0_SE15/TSI0_CH14
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel5                                     : 
**              A/D channel (pin)                          : PTB1/I2C0_SDA/FTM1_CH1/RMII0_MDC/MII0_MDC/FTM1_QD_PHB/LCD_P1/ADC0_SE9/ADC1_SE9/TSI0_CH6
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel6                                     : 
**              A/D channel (pin)                          : PTC2/SPI0_PCS2/UART1_CTS_b/FTM0_CH1/LCD_P22/ADC0_SE4b/CMP1_IN0/TSI0_CH15
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel7                                     : 
**              A/D channel (pin)                          : PTD1/SPI0_SCK/UART2_CTS_b/LCD_P41/ADC0_SE5b
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel8                                     : 
**              A/D channel (pin)                          : PTD5/SPI0_PCS2/UART0_CTS_b/FTM0_CH5/EWM_OUT_b/LCD_P45/ADC0_SE6b
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**            Channel9                                     : 
**              A/D channel (pin)                          : PTD6/SPI0_PCS3/UART0_RX/FTM0_CH6/FTM0_FLT0/LCD_P46/ADC0_SE7b
**              A/D channel (pin) signal                   : 
**              Mode select                                : Single Ended
**          A/D resolution                                 : Autoselect
**          Conversion time                                : 15.666667 µs
**          Low-power mode                                 : Disabled
**          High-speed conversion mode                     : Enabled
**          Asynchro clock output                          : Disabled
**          Sample time                                    : 20 = long
**          Internal trigger                               : Disabled
**          Number of conversions                          : 1
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Events enabled in init.                      : yes
**          CPU clock/speed selection                      : 
**            High speed mode                              : This component enabled
**            Low speed mode                               : This component disabled
**            Slow speed mode                              : This component disabled
**          High input limit                               : 1
**          Low input limit                                : 0
**          Get value directly                             : yes
**          Wait for result                                : yes
**     Contents    :
**         Enable       - byte AD1_Enable(void);
**         Disable      - byte AD1_Disable(void);
**         Measure      - byte AD1_Measure(bool WaitForResult);
**         MeasureChan  - byte AD1_MeasureChan(bool WaitForResult, byte Channel);
**         GetValue     - byte AD1_GetValue(void* Values);
**         GetChanValue - byte AD1_GetChanValue(byte Channel, void* Value);
**         Calibrate    - byte AD1_Calibrate(bool WaitForResult);
**         ConnectPin   - void AD1_ConnectPin(dword PinMask);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file AD1.h
** @version 01.00
** @brief
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
*/         
/*!
**  @addtogroup AD1_module AD1 module documentation
**  @{
*/         

#ifndef __AD1_H
#define __AD1_H

/* MODULE AD1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "AdcLdd1.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 

/* This constant contains the number of channels in the "A/D channel list"
   group */
#define AD1_CHANNEL_COUNT               AdcLdd1_CHANNEL_COUNT

#define AD1_CHANNEL0_PIN                0x01U
#define AD1_CHANNEL1_PIN                0x02U
#define AD1_CHANNEL2_PIN                0x04U
#define AD1_CHANNEL3_PIN                0x08U
#define AD1_CHANNEL4_PIN                0x10U
#define AD1_CHANNEL5_PIN                0x20U
#define AD1_CHANNEL6_PIN                0x40U
#define AD1_CHANNEL7_PIN                0x80U
#define AD1_CHANNEL8_PIN                0x0100U
#define AD1_CHANNEL9_PIN                0x0200U
#define AD1_TRIGGER_PIN                 0x20000000U
#define AD1_LOW_VOLT_REF_PIN            0x40000000U
#define AD1_HIGH_VOLT_REF_PIN           0x80000000U



#define AD1_SAMPLE_GROUP_SIZE 10U
static void AD1_MainMeasure(void);
/*
** ===================================================================
**     Method      :  MainMeasure (component ADC)
**
**     Description :
**         The method performs the conversion of the input channels in 
**         the polling mode.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void AD1_HWEnDi(void);
/*
** ===================================================================
**     Method      :  AD1_HWEnDi (component ADC)
**
**     Description :
**         Enables or disables the peripheral(s) associated with the 
**         component. The method is called automatically as a part of the 
**         Enable and Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte AD1_Enable(void);
/*
** ===================================================================
**     Method      :  AD1_Enable (component ADC)
*/
/*!
**     @brief
**         Enables A/D converter component. [Events] may be generated
**         ([DisableEvent]/[EnableEvent]). If possible, this method
**         switches on A/D converter device, voltage reference, etc.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

byte AD1_Disable(void);
/*
** ===================================================================
**     Method      :  AD1_Disable (component ADC)
*/
/*!
**     @brief
**         Disables A/D converter component. No [events] will be
**         generated. If possible, this method switches off A/D
**         converter device, voltage reference, etc.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

#define AD1_Measure(W) PE_AD1_Measure()
byte PE_AD1_Measure(void);
/*
** ===================================================================
**     Method      :  AD1_Measure (component ADC)
*/
/*!
**     @brief
**         This method performs one measurement on all channels that
**         are set in the component inspector. (Note: If the [number of
**         conversions] is more than one the conversion of A/D channels
**         is performed specified number of times.)
**     @param
**         WaitForResult   - Wait for a result of a
**                           conversion. If [interrupt service] is
**                           disabled, A/D peripheral doesn't support
**                           measuring all channels at once or Autoscan
**                           mode property isn't enabled and at the same
**                           time the [number of channels] is greater
**                           than 1, then the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time. If the [interrupt
**                           service] is disabled and a [number of
**                           conversions] is greater than 1, the
**                           parameter is ignored and the method also
**                           waits for each result every time.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
*/
/* ===================================================================*/

byte AD1_MeasureChan(bool WaitForResult,byte Channel);
/*
** ===================================================================
**     Method      :  AD1_MeasureChan (component ADC)
*/
/*!
**     @brief
**         This method performs measurement on one channel. (Note: If
**         the [number of conversions] is more than one the conversion
**         of the A/D channel is performed specified number of times.)
**     @param
**         WaitForResult   - Wait for a result of
**                           conversion. If the [interrupt service] is
**                           disabled and at the same time a [number of
**                           conversions] is greater than 1, the
**                           WaitForResult parameter is ignored and the
**                           method waits for each result every time.
**     @param
**         Channel         - Channel number. If only one
**                           channel in the component is set this
**                           parameter is ignored, because the parameter
**                           is set inside this method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
**                           ERR_RANGE - Parameter "Channel" out of range
*/
/* ===================================================================*/

byte AD1_GetValue(void* Values);
/*
** ===================================================================
**     Method      :  AD1_GetValue (component ADC)
*/
/*!
**     @brief
**         Returns the last measured values for all channels. Format
**         and width of the value is a native format of the A/D
**         converter.
**     @param
**         Values          - Pointer to the array that contains
**                           the measured data. Data type is a byte, a
**                           word or an int. It depends on the supported
**                           modes, resolution, etc. of the AD converter.
**                           See the Version specific information for
**                           the current CPU in [General Info].
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
*/
/* ===================================================================*/

byte AD1_GetChanValue(byte Channel, void* Value);
/*
** ===================================================================
**     Method      :  AD1_GetChanValue (component ADC)
*/
/*!
**     @brief
**         Returns the last measured value of the required channel.
**         Format and width of the value is a native format of the A/D
**         converter.
**     @param
**         Channel         - Channel number. If only one
**                           channel in the component is set then this
**                           parameter is ignored.
**     @param
**         Value           - Pointer to the measured value. Data
**                           type is a byte, a word or an int. It
**                           depends on the supported modes, resolution,
**                           etc. of the AD converter. See the Version
**                           specific information for the current CPU in
**                           [General Info].
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
*/
/* ===================================================================*/

#define AD1_Calibrate(W) PE_AD1_Calibrate()
byte PE_AD1_Calibrate(void);
/*
** ===================================================================
**     Method      :  AD1_Calibrate (component ADC)
**     Description :
**         This method starts self calibration process. Calibration is
**         typically used to remove the effects of the gain and offset
**         from a specific reading.
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of
**                           calibration. If the <interrupt service> is
**                           disabled, the WaitForResult parameter is
**                           ignored and the method waits for
**                           calibration result every time.
**     Returns     :
**         ---             - Error code
**                           ERR_OK - OK
**                           ERR_BUSY - A conversion is already running
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_FAILED - Calibration hasn't been
**                           finished correctly
** ===================================================================
*/

void AD1_ConnectPin(dword PinMask);
/*
** ===================================================================
**     Method      :  AD1_ConnectPin (component ADC)
**     Description :
**         This method reconnects the requested pin associated with the
**         selected peripheral in this component. This method is
**         available only for CPU derivatives and peripherals that
**         support the runtime pin sharing with other internal on-chip
**         peripherals.
**     Parameters  :
**         NAME            - DESCRIPTION
**         PinMask         - Mask for the requested pins. The
**                           peripheral pins are reconnected according
**                           to this mask.
**                           Possible parameters:
**                           ComponentName_HIGH_VOLT_REF_PIN - High
**                           voltage reference pin
**                           ComponentName_LOW_VOLT_REF_PIN - Low
**                           voltage reference pin
**                           ComponentName_CHANNEL0_PIN - Channel 0 pin
**                           from the A/D channels list
**                           ComponentName_CHANNEL1_PIN - Channel 1 pin
**                           from the A/D channels list
**                           ComponentName_CHANNEL2_PIN - Channel 2 pin
**                           from the A/D channels list
**                           :
**                           ComponentName_CHANNEL0_NEG_PIN - Channel 0
**                           negative pin from the A/D channels list for
**                           differential mode
**                           ComponentName_CHANNEL1_NEG_PIN - Channel 1
**                           negative pin from the A/D channels list for
**                           differential mode
**                           ComponentName_CHANNEL2_NEG_PIN - Channel 2
**                           negative pin from the A/D channels list for
**                           differential mode
**                           :
**                           ComponentName_TRIGGER_PIN - Pin for
**                           external trigger
**                           
**     Returns     : Nothing
** ===================================================================
*/

void AD1_Init(void);
/*
** ===================================================================
**     Method      :  AD1_Init (component ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END AD1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __AD1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
