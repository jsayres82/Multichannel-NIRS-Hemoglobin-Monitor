=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "Led_Select" (component BitIO)
   - Led_Select_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led_Select_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led_Select_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - Led_Select_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Led_Select_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "usb_cdc"   (component USB_CDC_CLASS)
   - usb_cdc_USB_Class_CDC_Init -The function initializes the Device and Controller layer
   - usb_cdc_USB_Class_CDC_DeInit -The function de-initializes the Device and Controller layer
   - usb_cdc_USB_Class_CDC_Send_Data -This function is used to send data from CDC Class over send endpoints

Module "usb_device" (component Usb_Device)
   - usb_device_USB_Class_Init -The function initializes the Class Module
   - usb_device_USB_Class_DeInit -This function De-initializes the Class Module
   - usb_device_USB_Class_Send_Data -This function calls the device to send data upon receiving an IN token
   - usb_device_USB_Class_Periodic_Task -This funtion calls for periodic tasks
   - usb_device__usb_device_init -This function initializes the Device layer and the Controller layer of the S08 USB stack. It 
                initialised the variables used for this layer and then calls the controller layer initialize function
   - usb_device__usb_device_deinit -This function de-initializes the Device layer and the Controller layer
   - usb_device__usb_device_init_endpoint -This function initializes an endpoint the Device layer and the Controller layer in 
                the S08 USB stack. It validate whether all endpoints have already been initialized or not and then calls the 
                controller layer endpoint initialize function
   - usb_device__usb_device_deinit_endpoint -This function deinitializes an endpoint the Device layer and the Controller layer 
                in the S08 USB stack. It validate whether all endpoints have already been deinitialized or not and then calls 
                the controller layer endpoint deinitialize function
   - usb_device__usb_device_get_status -This function retrieves the endpoint as well USB component status which is stored by 
                calling USB_Device_Set_Status. This function can be called by Application as well as the DCI layer.
   - usb_device__usb_device_set_status -This function sets the endpoint as well USB component status which can be retrieved by 
                calling _usb_device_get_status. This function can be called by Application as well as the DCI layer.
   - usb_device__usb_device_register_service -This function registers a callback function from the application if it is called 
                not already registered so that the regitered callback function can be if the event of that type occurs
   - usb_device__usb_device_unregister_service -This function un registers a callback function which has been previously 
                registered by the application layer
   - usb_device_USB_Device_Call_Service -This function calls the registered service callback function of the application layer 
                based on the type of event received. This function is called from the DCI layer.
   - usb_device_USB_Framework_Init -This fuction registers the service on the control endpoint
   - usb_device_USB_Framework_DeInit -The funtion De-initializes the Class Module
   - usb_device_USB_Framework_Reset -This function is used to reset the framework module
   - usb_device_USB_DCI_Bus_Reset_Handler -This functions is called when USB Bus Reset event is received on USB Bus.This 
                function clears all the errors conditions and reinit Global data structures. Also resets USB device controller.
   - usb_device_USB_DCI_Init -This function initializes the Controller layer
   - usb_device_USB_DCI_DeInit -This function de-initializes the Controller layer
   - usb_device_USB_DCI_Init_EndPoint -This function initializes an endpoint and the Bufffer Descriptor Table entry associated 
                with it. Incase the input parameters are invalid it will return USBERR_EP_INIT_FAILED error.
   - usb_device_USB_DCI_Deinit_EndPoint -This function un-intializes the endpoint by clearing the corresponding endpoint 
                control register and then clearing the bdt elem.
   - usb_device_USB_DCI_Cancel_Transfer -This function cancels any pending Transfers which ahve not been sent
   - usb_device_USB_DCI_Stall_EndPoint -This function stalls the endpoint by setting Endpoint BDT
   - usb_device_USB_DCI_Unstall_EndPoint -This function unstalls the endpoint by clearing Endpoint Control Register and BDT
   - usb_device_USB_DCI_Get_Setup_Data -This function copies Setup Packet from USB RAM to application buffer
   - usb_device_USB_DCI_Get_Transfer_Status -This function retrieves the transfer status of the endpoint by checking the BDT as 
                well as the endpoint control register
   - usb_device_USB_DCI_Recv_Data -This function retrieves data received data on a RECV endpoint by copying it from USB RAM to 
                application buffer
   - usb_device_USB_DCI_Send_Data -This function configures Controller to send data on an SEND endpoint by setting the BDT to 
                send data.
   - usb_device_USB_DCI_Assert_Resume -This function starts RESUME signalling and then stops it after some delay. In this delay 
                make sure that COP is reset.
   - usb_device_USB_DCI_Set_Address -This function configures Controller to send data on an SEND endpoint
   - usb_device_USB_DCI_OnDeviceSpeedDetect -This function is called after the device detects bus speed
   - usb_device_USB_DCI_OnDeviceSuspend -This function is called after the suspend condition is met
   - usb_device_USB_DCI_OnDeviceResume -This function is called after the resume signaling is done
   - usb_device_USB_DCI_OnDeviceSetupPacket -This function called after the setup packet is received into the internal buffer
   - usb_device_USB_DCI_OnDeviceError -This function is called after the Error is detected
   - usb_device_Clear_Mem -This function clears memory starting from start_addr till count bytes
   - usb_device_USB_Desc_Get_Descriptor -The function returns the correponding descriptor
   - usb_device_USB_Desc_Get_Interface -The function returns the alternate interface
   - usb_device_USB_Desc_Set_Interface -The function sets the alternate interface
   - usb_device_USB_Desc_Valid_Configation -This function checks whether the configuration is valid or not
   - usb_device_USB_Desc_Valid_Interface -This function checks whether the interface is valid or not
   - usb_device_USB_Desc_Remote_Wakeup -This function returns remote wakeup is supported or not
   - usb_device_USB_Desc_Get_Endpoints -This function returns the information about all the non control endpoints implemented

Module "AD1"       (component AD1forNirs)
   - AD1_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - AD1_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD1_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of the 
                A/D converter.
   - AD1_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.
   - AD1_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.
   - AD1_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is available only for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "INT_FTM0"  (component InterruptVector)

Module "AD2"       (component AD2forNirs)
   - AD2_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - AD2_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AD2_EnableEvent -Enables the <events>.
   - AD2_DisableEvent -Disables the <events>.
   - AD2_Start -This method starts continuous conversion on all channels that are set in the component inspector. When each 
                measurement on all channels has finished the <OnEnd > event may be invoked. This method is not available if the 
                <interrupt service> is disabled and the device doesn't support the continuous mode. Note: If time of 
                measurement is too short and the instruction clock is too slow then the conversion complete interrupt and its 
                handler may cause a system overflow.
   - AD2_Stop -This method stops the continuous measurement or disables a trigger mode (if supported by HW), which has been 
                started by one of the following methods:  [ Version specific information not for Freescale 56800 and HCS08 and 
                HC08 and HCS12 and HCS12X derivatives ]     - <Start>     - EnableInt(Chan)Trigger     - EnableExt(Chan)Trigger 
                The Stop method is available if one of the previously mentioned methods is supported by A/D converter device 
                and is enabled to be generated.
   - AD2_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD2_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD2_EnableIntChanTrigger -Enables the internal trigger mode. A conversion of one required channel will be launched by 
                internal sync pulse. If the <Number of conversions> property is greater than 1, a conversion will be launched 
                more than once (by an internal signal) according to <Number of conversions>. It's possible to disable the 
                trigger mode by <Stop> method.  [ Version specific information for other derivatives than Freescale HCS12 and 
                HCS12X ]   This EnableIntChanTrigger method is available only when the <Internal trigger> property is enabled.
   - AD2_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of the 
                A/D converter.
   - AD2_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.
   - AD2_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared with 
                <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 1 and 
                <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD2_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.
   - AD2_ConnectPin -This method reconnects the requested pin associated with the selected peripheral in this component. This 
                method is available only for CPU derivatives and peripherals that support the runtime pin sharing with other 
                internal on-chip peripherals.

Module "VREF"      (component Init_VREF_VAR0)
   - VREF_Init -This method initializes registers of the VREF module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "PDB0"      (component Init_PDB_VAR0)
   - PDB0_Init -This method initializes registers of the PDB module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "Cpu"       (component MK53N512MD100)

===================================================================================
